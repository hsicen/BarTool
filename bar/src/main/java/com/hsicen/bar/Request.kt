package com.hsicen.barimport android.app.Activityimport android.app.Dialogimport android.content.res.Configurationimport android.os.*import androidx.fragment.app.DialogFragmentimport androidx.fragment.app.Fragmentimport androidx.fragment.app.FragmentActivityimport androidx.fragment.app.FragmentManagerimport android.app.Fragment as AppFragmentclass RequestBarManagerFragment : AppFragment() {  private var mBarDelegate: ImmerseDelegate? = null  fun get(any: Any?): ImmerseBar? {    if (null == mBarDelegate) {      mBarDelegate = ImmerseDelegate(any)    }    return mBarDelegate?.get()  }  fun get(act: Activity?, dialog: Dialog?): ImmerseBar? {    if (null == mBarDelegate) {      mBarDelegate = ImmerseDelegate(act, dialog)    }    return mBarDelegate?.get()  }  override fun onActivityCreated(savedInstanceState: Bundle?) {    super.onActivityCreated(savedInstanceState)    mBarDelegate?.onActivityCreated(resources.configuration)  }  override fun onResume() {    super.onResume()    mBarDelegate?.onResume()  }  override fun onDestroyView() {    super.onDestroyView()    mBarDelegate?.onDestroy()    mBarDelegate = null  }  override fun onConfigurationChanged(newConfig: Configuration) {    super.onConfigurationChanged(newConfig)    mBarDelegate?.onConfigurationChanged(newConfig)  }}class RequestBarManagerSupportFragment : Fragment() {  private var mBarDelegate: ImmerseDelegate? = null  fun get(any: Any?): ImmerseBar? {    if (null == mBarDelegate) {      mBarDelegate = ImmerseDelegate(any)    }    return mBarDelegate?.get()  }  fun get(act: Activity?, dialog: Dialog?): ImmerseBar? {    if (null == mBarDelegate) {      mBarDelegate = ImmerseDelegate(act, dialog)    }    return mBarDelegate?.get()  }  override fun onActivityCreated(savedInstanceState: Bundle?) {    super.onActivityCreated(savedInstanceState)    mBarDelegate?.onActivityCreated(resources.configuration)  }  override fun onResume() {    super.onResume()    mBarDelegate?.onResume()  }  override fun onDestroyView() {    super.onDestroyView()    mBarDelegate?.onDestroy()    mBarDelegate = null  }  override fun onConfigurationChanged(newConfig: Configuration) {    super.onConfigurationChanged(newConfig)    mBarDelegate?.onConfigurationChanged(newConfig)  }}/** * The type Request manager retriever. */class RequestManagerRetriever : Handler.Callback {  companion object {    private const val ID_REMOVE_FRAGMENT_MANAGER = 1    private const val ID_REMOVE_SUPPORT_FRAGMENT_MANAGER = 2    private const val ID_REMOVE_FRAGMENT_MANAGER_REMOVE = 3    private const val ID_REMOVE_SUPPORT_FRAGMENT_MANAGER_REMOVE = 4    val instance by lazy { RequestManagerRetriever() }  }  private val mTag = "${ImmerseBar::class.java.name}."  private val mNotOnly = ".tag.notOnly."  private val mHandler = Handler(Looper.getMainLooper(), this)  private val mPendingFragments = HashMap<android.app.FragmentManager, RequestBarManagerFragment?>()  private val mPendingSupportFragments = HashMap<FragmentManager, RequestBarManagerSupportFragment?>()  private val mPendingRemoveFragments = HashMap<String, RequestBarManagerFragment?>()  private val mPendingSupportRemoveFragments = HashMap<String, RequestBarManagerSupportFragment?>()  fun get(act: Activity?, isOnly: Boolean): ImmerseBar? {    val mAct = act ?: return null    val tag = genTag(mAct, isOnly)    return if (mAct is FragmentActivity) {      getSupportFragment(mAct.supportFragmentManager, tag)?.get(mAct)    } else {      getFragment(mAct.fragmentManager, tag)?.get(mAct)    }  }  fun get(fragment: Fragment?, isOnly: Boolean): ImmerseBar? {    fragment?.activity ?: return null    if (fragment is DialogFragment) {      fragment.dialog ?: return null    }    val tag = genTag(fragment, isOnly)    return getSupportFragment(fragment.childFragmentManager, tag)?.get(fragment)  }  fun get(fragment: AppFragment?, isOnly: Boolean): ImmerseBar? {    fragment?.activity ?: return null    if (fragment is android.app.DialogFragment) {      fragment.dialog ?: return null    }    val tag = genTag(fragment, isOnly)    return getFragment(fragment.childFragmentManager, tag)?.get(fragment)  }  fun get(act: Activity?, dialog: Dialog?, isOnly: Boolean): ImmerseBar? {    act ?: return null    dialog ?: return null    val tag = genTag(dialog, isOnly)    return if (act is FragmentActivity) {      getSupportFragment(act.supportFragmentManager, tag)?.get(act, dialog)    } else {      getFragment(act.fragmentManager, tag)?.get(act, dialog)    }  }  fun destroy(fragment: Fragment?, isOnly: Boolean) {    fragment ?: return    val tag = genTag(fragment, isOnly)    getSupportFragment(fragment.childFragmentManager, tag, true)  }  fun destroy(fragment: AppFragment?, isOnly: Boolean) {    fragment ?: return    val tag = genTag(fragment, isOnly)    getFragment(fragment.childFragmentManager, tag, true)  }  fun destroy(act: Activity?, dialog: Dialog?, isOnly: Boolean) {    act ?: return    dialog ?: return    val tag = genTag(dialog, isOnly)    if (act is FragmentActivity) {      getSupportFragment(act.supportFragmentManager, tag, true)    } else {      getFragment(act.fragmentManager, tag, true)    }  }  private fun genTag(any: Any, isOnly: Boolean): String {    var tag = "$mTag${any.javaClass.name}"    if (isOnly.not()) {      tag = "$tag${System.identityHashCode(any)}$mNotOnly"    }    return tag  }  private fun getFragment(fm: android.app.FragmentManager?, tag: String):    RequestBarManagerFragment? {    return getFragment(fm, tag, false)  }  private fun getFragment(fm: android.app.FragmentManager?, tag: String, destroy: Boolean):    RequestBarManagerFragment? {    return kotlin.runCatching {      fm ?: return null      var fragment = fm.findFragmentByTag(tag) as? RequestBarManagerFragment?      if (null == fragment) {        fragment = mPendingFragments[fm]        if (null == fragment) {          if (destroy) {            return null          } else {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {              fm.fragments.forEach { tmp ->                (tmp as? RequestBarManagerFragment?)?.let {                  val oldTag = it.tag                  if (null == oldTag) {                    fm.beginTransaction().remove(it).commitAllowingStateLoss()                  } else {                    if (oldTag.contains(mNotOnly)) {                      fm.beginTransaction().remove(it).commitAllowingStateLoss()                    }                  }                }              }            }          }          fragment = RequestBarManagerFragment()          mPendingFragments[fm] = fragment          fm.beginTransaction().add(fragment, tag).commitAllowingStateLoss()          mHandler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget()        }      }      if (destroy) {        if (null == mPendingRemoveFragments[tag]) {          mPendingRemoveFragments[tag] = fragment          fm.beginTransaction().remove(fragment).commitAllowingStateLoss()          mHandler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER_REMOVE, tag).sendToTarget()        }        return null      }      return fragment    }.getOrNull()  }  private fun getSupportFragment(fm: FragmentManager, tag: String):    RequestBarManagerSupportFragment? {    return getSupportFragment(fm, tag, false)  }  private fun getSupportFragment(manager: FragmentManager?, tag: String, destroy: Boolean):    RequestBarManagerSupportFragment? {    return kotlin.runCatching {      manager ?: return null      var fragment = manager.findFragmentByTag(tag) as? RequestBarManagerSupportFragment?      if (null == fragment) {        fragment = mPendingSupportFragments[manager]        if (null == fragment) {          if (destroy) {            return null          } else {            manager.fragments.forEach { tmp ->              (tmp as? RequestBarManagerSupportFragment?)?.let {                val oldTag = it.tag                if (null == oldTag) {                  manager.beginTransaction().remove(it).commitAllowingStateLoss()                } else {                  if (oldTag.contains(mNotOnly)) {                    manager.beginTransaction().remove(it).commitAllowingStateLoss()                  }                }              }            }          }          fragment = RequestBarManagerSupportFragment()          mPendingSupportFragments[manager] = fragment          manager.beginTransaction().add(fragment, tag).commitAllowingStateLoss()          mHandler.obtainMessage(ID_REMOVE_SUPPORT_FRAGMENT_MANAGER, manager).sendToTarget()        }      }      if (destroy) {        if (null == mPendingSupportRemoveFragments[tag]) {          mPendingSupportRemoveFragments[tag] = fragment          manager.beginTransaction().remove(fragment).commitAllowingStateLoss()          mHandler.obtainMessage(ID_REMOVE_SUPPORT_FRAGMENT_MANAGER_REMOVE, tag).sendToTarget()        }        return null      }      return fragment    }.getOrNull()  }  override fun handleMessage(msg: Message): Boolean {    var handled = true    kotlin.runCatching {      when (msg.what) {        ID_REMOVE_FRAGMENT_MANAGER -> {          val fm = msg.obj as? android.app.FragmentManager?          mPendingFragments.remove(fm)        }        ID_REMOVE_SUPPORT_FRAGMENT_MANAGER -> {          val fm = msg.obj as? FragmentManager?          mPendingSupportFragments.remove(fm)        }        ID_REMOVE_FRAGMENT_MANAGER_REMOVE -> {          val tag = msg.obj as? String?          mPendingRemoveFragments.remove(tag)        }        ID_REMOVE_SUPPORT_FRAGMENT_MANAGER_REMOVE -> {          val tag = msg.obj as? String?          mPendingSupportRemoveFragments.remove(tag)        }        else -> {          handled = false        }      }    }    return handled  }}