package com.hsicen.barimport android.annotation.SuppressLintimport android.app.Activityimport android.content.Contextimport android.content.res.Configurationimport android.os.Buildimport android.util.TypedValueimport android.view.DisplayCutoutimport android.view.View/** * 刘海屏处理 */interface NotchCallback {  fun onNotchHeight(height: Int)}object Notches {  private const val SYSTEM_PROPERTIES = "android.os.SystemProperties"  private const val NOTCH_XIAO_MI = "ro.miui.notch"  private const val NOTCH_HUA_WEI = "com.huawei.android.util.HwNotchSizeUtil"  private const val NOTCH_VIVO = "android.util.FtFeature"  private const val NOTCH_OPPO = "com.oppo.feature.screen.heteromorphism"  private const val NOTCH_LENOVO = "config_screen_has_notch"  private const val NOTCH_MEIZU = "flyme.config.FlymeFeature"  fun notchScreen(act: Activity?): Boolean {    return act?.let {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {        hasNotchAtAndroidP(it)      } else {        hasNotchAtXiaoMi(it)          || hasNotchAtHuaWei(it)          || hasNotchAtVivo(it)          || hasNotchAtOppo(it)          || hasNotchAtLenovo(it)          || hasNotchAtMeizu()      }    } ?: false  }  fun notchScreen(view: View?): Boolean {    return view?.let {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {        hasNotchAtAndroidP(it)      } else {        hasNotchAtXiaoMi(it.context)          || hasNotchAtHuaWei(it.context)          || hasNotchAtVivo(it.context)          || hasNotchAtOppo(it.context)          || hasNotchAtLenovo(it.context)          || hasNotchAtMeizu()      }    } ?: false  }  fun notchHeight(act: Activity?): Int {    if (notchScreen(act).not()) return 0    val mAct = act ?: return 0    var notchHeight = 0    val statusBarHeight = ImmerseBar.getStatusBarHeight(mAct)    val cutout = getDisplayCutout(act)    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P && cutout != null) {      notchHeight = if (act.resources.configuration.orientation        == Configuration.ORIENTATION_PORTRAIT      ) {        cutout.safeInsetTop      } else {        if (cutout.safeInsetLeft == 0) {          cutout.safeInsetRight        } else cutout.safeInsetLeft      }    } else {      if (hasNotchAtXiaoMi(mAct)) notchHeight = getXiaoMiNotchHeight(mAct)      if (hasNotchAtHuaWei(mAct)) notchHeight = getHuaWeiNotchSize(mAct)[1]      if (hasNotchAtVivo(mAct)) {        notchHeight = dp2px(mAct, 32)        if (notchHeight < statusBarHeight) {          notchHeight = statusBarHeight        }      }      if (hasNotchAtOppo(mAct)) {        notchHeight = 80        if (notchHeight < statusBarHeight) {          notchHeight = statusBarHeight        }      }      if (hasNotchAtLenovo(act)) {        notchHeight = getLenovoNotchHeight(act)      }      if (hasNotchAtMeizu()) {        notchHeight = getMeizuNotchHeight(act)      }    }    return notchHeight  }  fun notchHeight(act: Activity?, callback: NotchCallback?) {    if (act == null || act.isFinishing || act.isDestroyed) {      callback?.onNotchHeight(0)    }    act?.window?.decorView?.post {      if (act.isFinishing || act.isDestroyed) {        callback?.onNotchHeight(0)        return@post      }      callback?.onNotchHeight(notchHeight(act))    }  }  private fun getXiaoMiNotchHeight(context: Context): Int {    return kotlin.runCatching {      val resId = context.resources        .getIdentifier("notch_height", "dimen", "android")      if (resId > 0) {        context.resources.getDimensionPixelSize(resId)      } else 0    }.getOrNull() ?: 0  }  private fun getHuaWeiNotchSize(ctx: Context): IntArray {    return kotlin.runCatching {      val clazz = ctx.classLoader        .loadClass("com.huawei.android.util.HwNotchSizeUtil")      val method = clazz.getMethod("getNotchSize")      method.invoke(clazz) as? IntArray?    }.getOrNull() ?: IntArray(2) { 0 }  }  private fun getLenovoNotchHeight(ctx: Context): Int {    return kotlin.runCatching {      val resId = ctx.resources        .getIdentifier("notch_h", "dimen", "android")      if (resId > 0) {        ctx.resources.getDimensionPixelSize(resId)      } else 0    }.getOrNull() ?: 0  }  private fun getMeizuNotchHeight(ctx: Context): Int {    return kotlin.runCatching {      val resId = ctx.resources        .getIdentifier("fringe_height", "dimen", "android")      if (resId > 0) {        ctx.resources.getDimensionPixelSize(resId)      } else 0    }.getOrNull() ?: 0  }  private fun hasNotchAtAndroidP(act: Activity?): Boolean {    return getDisplayCutout(act) != null  }  private fun hasNotchAtAndroidP(view: View?): Boolean {    return getDisplayCutout(view) != null  }  @SuppressLint("PrivateApi")  private fun hasNotchAtXiaoMi(ctx: Context?): Boolean {    return kotlin.runCatching {      ctx?.let {        if (OSUtils.isXiaoMi()) {          val clazz = it.classLoader.loadClass(SYSTEM_PROPERTIES)          val method = clazz.getMethod("getInt", String::class.java, Int::class.java)          val notchCount = method.invoke(clazz, NOTCH_XIAO_MI, 0) as Int?          notchCount == 1        } else false      } ?: false    }.getOrNull() ?: false  }  private fun hasNotchAtHuaWei(ctx: Context?): Boolean {    return kotlin.runCatching {      ctx?.let {        if (OSUtils.isHuaWei()) {          val clazz = it.classLoader.loadClass(NOTCH_HUA_WEI)          val method = clazz.getMethod("hasNotchInScreen")          method.invoke(clazz) as Boolean        } else false      } ?: false    }.getOrNull() ?: false  }  @SuppressLint("PrivateApi")  private fun hasNotchAtVivo(ctx: Context?): Boolean {    return kotlin.runCatching {      ctx?.let {        if (OSUtils.isVivo()) {          val clazz = it.classLoader.loadClass(NOTCH_VIVO)          val method = clazz.getMethod("isFeatureSupport", Int::class.java)          method.invoke(clazz, 0x00000020) as Boolean        } else false      } ?: false    }.getOrNull() ?: false  }  private fun hasNotchAtOppo(ctx: Context?): Boolean {    return kotlin.runCatching {      ctx?.let {        if (OSUtils.isOppo()) {          it.packageManager.hasSystemFeature(NOTCH_OPPO)        } else false      } ?: false    }.getOrNull() ?: false  }  private fun hasNotchAtLenovo(ctx: Context?): Boolean {    return kotlin.runCatching {      ctx?.let {        if (OSUtils.isLenovo()) {          val resId = it.resources.getIdentifier(NOTCH_LENOVO, "bool", "android")          resId > 0 && it.resources.getBoolean(resId)        } else false      } ?: false    }.getOrNull() ?: false  }  private fun hasNotchAtMeizu(): Boolean {    return kotlin.runCatching {      if (OSUtils.isMeizu()) {        val clazz = Class.forName(NOTCH_MEIZU)        val field = clazz.getDeclaredField("IS_FRINGE_DEVICE")        field.get(null) as Boolean      } else false    }.getOrNull() ?: false  }  private fun getDisplayCutout(act: Activity?): DisplayCutout? {    return getDisplayCutout(act?.window?.decorView)  }  private fun getDisplayCutout(view: View?): DisplayCutout? {    return kotlin.runCatching {      view?.let {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {          it.rootWindowInsets?.displayCutout        } else null      }    }.getOrNull()  }  private fun dp2px(context: Context, dpValue: Int): Int {    return TypedValue.applyDimension(      TypedValue.COMPLEX_UNIT_DIP,      dpValue.toFloat(),      context.resources.displayMetrics    ).toInt()  }}