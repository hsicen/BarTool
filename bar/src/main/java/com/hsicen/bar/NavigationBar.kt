package com.hsicen.barimport android.app.Applicationimport android.database.ContentObserverimport android.net.Uriimport android.os.Handlerimport android.os.Looperimport android.provider.Settings/** * NavigationBar 相关 *//*** NavigationBar 类型定义 */sealed class NavigationBarType(val type: Int) {  /*** 经典导航键 */  data object CLASSIC : NavigationBarType(0)  /*** 手势导航 */  data object GESTURES : NavigationBarType(1)  /*** 手势导航，三段式，小按钮 */  data object GESTURES_THREE_STAGE : NavigationBarType(2)  /*** 两个按钮 */  data object DOUBLE : NavigationBarType(3)  /*** 未知*/  data object UNKNOWN : NavigationBarType(-1)}/*** NavigationBar 状态监听 */interface OnNavigationBarListener {  fun onNavigationBarChange(show: Boolean, type: NavigationBarType)}/*** 导航栏显示隐藏处理 */class NavigationBarObserver :  ContentObserver(Handler(Looper.getMainLooper())) {  companion object {    val instance by lazy { NavigationBarObserver() }  }  private var mApp: Application? = null  private var mIsRegister = false  private val mListener = ArrayList<OnNavigationBarListener>()  fun register(app: Application?) {    if (mIsRegister) return    val cr = mApp?.contentResolver ?: return    mApp = app    var uri: Uri? = null    var uri1: Uri? = null    var uri2: Uri? = null    when {      OSUtils.isHuaWei() || OSUtils.isEMUI() -> {        if (OSUtils.isEMUI3_x()) {          uri = Settings.System.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_EMUI)        } else {          uri1 = Settings.Global.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_EMUI)        }      }      OSUtils.isXiaoMi() || OSUtils.isMIUI() -> {        uri = Settings.Global.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_MIUI)        uri1 = Settings.Global.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_MIUI_HIDE)      }      OSUtils.isVivo() || OSUtils.isFuntouchOrOriginOs() -> {        uri = Settings.Secure.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_VIVO)      }      OSUtils.isOppo() || OSUtils.isColorOs() -> {        uri = Settings.Secure.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_OPPO)      }      OSUtils.isSamsung() -> {        val mode = Settings.Global          .getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_SAMSUNG_OLD, -1)        if (-1 == mode) {          uri = Settings.Global.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_SAMSUNG)          uri1 = Settings.Global.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_SAMSUNG_GESTURE_TYPE)          uri2 = Settings.Global.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_SAMSUNG_GESTURE)        } else {          uri = Settings.Global.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_SAMSUNG_OLD)        }      }      else -> {        uri = Settings.Secure.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_DEFAULT)      }    }    uri?.let {      cr.registerContentObserver(it, true, this)      mIsRegister = true    }    uri1?.let { cr.registerContentObserver(it, true, this) }    uri2?.let { cr.registerContentObserver(it, true, this) }  }  fun addNavbarListener(listener: OnNavigationBarListener?) {    listener ?: return    if (mListener.contains(listener).not()) {      mListener.add(listener)    }  }  fun removeNavbarListener(listener: OnNavigationBarListener?) {    listener ?: return    mListener.remove(listener)  }  override fun onChange(selfChange: Boolean) {    super.onChange(selfChange)    val app = mApp ?: return    if (mListener.isEmpty()) return    val bean = GestureUtils.getGestureBean(app)    var show = false    if (bean.isGesture) {      if (bean.checkNavigation) {        val navH = BarConfig.getNavigationBarHeightInternal(app)        show = navH > 0      } else show = false    } else show = true    mListener.forEach {      it.onNavigationBarChange(show, bean.type)    }  }}/*** 华为Emui3状态栏监听器 */class EMUI3NavigationBarObserver :  ContentObserver(Handler(Looper.getMainLooper())) {  companion object {    val instance by lazy { EMUI3NavigationBarObserver() }  }  private var mApp: Application? = null  private var mIsRegister = false  private val mListener = ArrayList<ImmerseCallback>()  fun register(app: Application?) {    if (mIsRegister) return    val cr = app?.contentResolver ?: return    mApp = app    Settings.System.getUriFor(Constants.IMMERSE_NAVIGATION_BAR_MODE_EMUI)?.let {      cr.registerContentObserver(it, true, this)      mIsRegister = true    }  }  fun addNavbarListener(listener: ImmerseCallback?) {    listener ?: return    if (mListener.contains(listener).not()) {      mListener.add(listener)    }  }  fun removeNavbarListener(listener: ImmerseCallback?) {    listener ?: return    mListener.remove(listener)  }  override fun onChange(selfChange: Boolean) {    super.onChange(selfChange)    val app = mApp ?: return    if (mListener.isEmpty()) return    val type = Settings.System      .getInt(app.contentResolver, Constants.IMMERSE_NAVIGATION_BAR_MODE_EMUI, 0)    var navType: NavigationBarType = NavigationBarType.CLASSIC    if (1 == type) navType = NavigationBarType.GESTURES    mListener.forEach {      it.onNavigationBarChange(type == 0, navType)    }  }}