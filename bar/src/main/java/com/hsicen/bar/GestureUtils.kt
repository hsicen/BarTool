package com.hsicen.barimport android.content.Contextimport android.provider.Settings/** * 手势相关 */object GestureUtils {  fun getGestureBean(act: Context?): GestureBean {    return kotlin.runCatching {      act?.contentResolver?.let { cr ->        var navType: NavigationBarType = NavigationBarType.UNKNOWN        var isGesture = false        var cheNav = false        var type = -1        when {          OSUtils.isHuaWei() || OSUtils.isEMUI() -> {            type = if (OSUtils.isEMUI3_x()) {              Settings.System.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_EMUI, -1)            } else {              Settings.Global.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_EMUI, -1)            }            if (0 == type) {              navType = NavigationBarType.CLASSIC              isGesture = false            } else if (1 == type) {              navType = NavigationBarType.GESTURES              isGesture = true            }          }          OSUtils.isXiaoMi() || OSUtils.isMIUI() -> {            type = Settings.Global.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_MIUI, -1)            if (0 == type) {              navType = NavigationBarType.CLASSIC              isGesture = false            } else if (1 == type) {              navType = NavigationBarType.GESTURES              isGesture = true              val mode = Settings.Global.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_MIUI_HIDE, -1)              cheNav = mode != 1            }          }          OSUtils.isVivo() || OSUtils.isFuntouchOrOriginOs() -> {            type = Settings.Secure.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_VIVO, -1)            when (type) {              0 -> {                navType = NavigationBarType.CLASSIC                isGesture = false              }              1 -> {                navType = NavigationBarType.GESTURES_THREE_STAGE                isGesture = true              }              2 -> {                navType = NavigationBarType.GESTURES                isGesture = true              }            }          }          OSUtils.isOppo() || OSUtils.isColorOs() -> {            type = Settings.Secure.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_OPPO, -1)            if (0 == type) {              navType = NavigationBarType.CLASSIC              isGesture = false            } else if (1 == type || 2 == type || 3 == type) {              navType = NavigationBarType.GESTURES              isGesture = true            }          }          OSUtils.isSamsung() -> {            type = Settings.Global.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_SAMSUNG, -1)            if (-1 != type) {              if (0 == type) {                navType = NavigationBarType.CLASSIC                isGesture = false              } else if (1 == type) {                isGesture = true                val mode = Settings.Global.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_SAMSUNG_GESTURE_TYPE, -1)                navType = if (1 == mode) {                  NavigationBarType.GESTURES                } else {                  NavigationBarType.GESTURES_THREE_STAGE                }                val hide = Settings.Global.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_SAMSUNG_GESTURE, -1)                cheNav = hide == 1              }            } else {              type = Settings.Global.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_SAMSUNG_OLD, -1)              if (0 == type) {                navType = NavigationBarType.CLASSIC                isGesture = false              } else {                navType = NavigationBarType.GESTURES                isGesture = true              }            }          }        }        if (-1 == type) {          type = Settings.Secure.getInt(cr, Constants.IMMERSE_NAVIGATION_BAR_MODE_DEFAULT, -1)          when (type) {            0 -> {              navType = NavigationBarType.CLASSIC              isGesture = false            }            1 -> {              navType = NavigationBarType.DOUBLE              isGesture = false            }            2 -> {              navType = NavigationBarType.GESTURES              isGesture = true              cheNav = true            }          }        }        GestureBean(isGesture, cheNav, navType)      }    }.getOrNull() ?: GestureBean(type = NavigationBarType.UNKNOWN)  }  data class GestureBean(    val isGesture: Boolean = false,    val checkNavigation: Boolean = false,    val type: NavigationBarType  )}