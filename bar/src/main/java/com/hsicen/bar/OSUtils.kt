package com.hsicen.barimport android.annotation.SuppressLintimport android.os.Buildimport android.text.TextUtils/** * 设备系统工具 */object OSUtils {  private const val KEY_MIUI_VERSION_NAME = "ro.miui.ui.version.name"  private const val KEY_EMUI_VERSION_NAME = "ro.build.version.emui"  private const val KEY_OPPO_VERSION_NAME = "ro.build.version.opporom"  private const val KEY_VIVO_VERSION_NAME = "ro.vivo.os.version"  private const val KEY_DISPLAY = "ro.build.display.id"  fun isXiaoMi(): Boolean {    return Build.MANUFACTURER.lowercase().contains("xiaomi")  }  fun isHuaWei(): Boolean {    return Build.MANUFACTURER.lowercase().contains("huawei")  }  fun isOppo(): Boolean {    return Build.MANUFACTURER.lowercase().contains("oppo")  }  fun isVivo(): Boolean {    return Build.MANUFACTURER.lowercase().contains("vivo")  }  fun isSamsung(): Boolean {    return Build.MANUFACTURER.lowercase().contains("samsung")  }  fun isLenovo(): Boolean {    return Build.MANUFACTURER.lowercase().contains("lenovo")  }  fun isMeizu(): Boolean {    return Build.MANUFACTURER.lowercase().contains("meizu")  }  fun isMIUI(): Boolean {    val vn = getSystemProperty(KEY_MIUI_VERSION_NAME)    return TextUtils.isEmpty(vn).not()  }  fun isMIUI6Later(): Boolean {    val version = getMIUIVersion()    return if (TextUtils.isEmpty(version).not()) {      kotlin.runCatching {        Integer.parseInt(version) >= 6      }.getOrNull() ?: false    } else false  }  fun isEMUI(): Boolean {    val vn = getSystemProperty(KEY_EMUI_VERSION_NAME)    return TextUtils.isEmpty(vn).not()  }  fun isEMUI3_1(): Boolean {    val version = getEMUIVersion()    return "EmotionUI 3".equals(version, true)      || version.contains("EmotionUI_3.1", true)  }  fun isEMUI3_0(): Boolean {    val version = getEMUIVersion()    return version.contains("EmotionUI_3.0", true)  }  fun isEMUI3_x(): Boolean {    return isEMUI3_0() || isEMUI3_1()  }  fun isColorOs(): Boolean {    val vn = getSystemProperty(KEY_OPPO_VERSION_NAME)    return TextUtils.isEmpty(vn).not()  }  fun isFuntouchOrOriginOs(): Boolean {    val vn = getSystemProperty(KEY_VIVO_VERSION_NAME)    return TextUtils.isEmpty(vn).not()  }  fun isFlymeOs(): Boolean {    return getFlymeOsVersion()      .lowercase()      .contains("flyme", true)  }  fun isFlymeOS4Later(): Boolean {    val version = getFlymeOsVersion()    return if (TextUtils.isEmpty(version).not()) {      kotlin.runCatching {        if (version.lowercase().contains("os")) {          Integer.parseInt(version.substring(9, 10)) >= 4        } else {          Integer.parseInt(version.substring(6, 7)) >= 4        }      }.getOrNull() ?: false    } else false  }  fun isFlymeOS5(): Boolean {    val version = getFlymeOsVersion()    return if (TextUtils.isEmpty(version).not()) {      kotlin.runCatching {        if (version.lowercase().contains("os")) {          Integer.parseInt(version.substring(9, 10)) == 5        } else {          Integer.parseInt(version.substring(6, 7)) == 5        }      }.getOrNull() ?: false    } else false  }  private fun getEMUIVersion(): String {    return getSystemProperty(KEY_EMUI_VERSION_NAME)  }  private fun getMIUIVersion(): String {    return getSystemProperty(KEY_MIUI_VERSION_NAME)  }  private fun getFlymeOsVersion(): String {    return getSystemProperty(KEY_DISPLAY)  }  @SuppressLint("PrivateApi")  private fun getSystemProperty(key: String?): String {    return kotlin.runCatching {      val clazz = Class.forName("android.os.SystemProperties")      val method = clazz.getMethod("get", String::class.java, String::class.java)      (method.invoke(clazz, key, "") as? String?) ?: ""    }.onFailure {      LogUtils.log("getSystemProperty: $it")    }.getOrNull() ?: ""  }}